// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Activity {
  id          String        @id @default(cuid())
  name        String
  cover       String
  description String        @db.Text // for storing RTE info
  summary     String        @db.Text // for storing short description in events list page
  duration    Int           @default(120)
  city        City?
  status      ActivityState @default(DRAFT)
  author_id   String
  author      User          @relation(fields: [author_id], references: [email])
  posts_urls  String?
  // published   Boolean @default(false)
  // startTime   DateTime?
  // endTime     DateTime?

  events Event[]
  tags   ActivityTags[]
  posts  Posts[]

  @@index([author_id])
}

model Posts {
  id          String   @id @default(cuid())
  activity_id String
  activity    Activity @relation(fields: [activity_id], references: [id])
  url         String

  @@index([activity_id])
}

enum ActivityState {
  OPEN
  DRAFT
  CLOSED
}

enum City {
  Chennai
  Bangalore
}

model Event {
  id                 String        @id @default(cuid())
  city               City
  location           String
  leaders            EventLeader[]
  volunteers         Volunteers[]
  description        String?       @db.Text
  min_volunteers     Int           @default(1)
  max_volunteers     Int           @default(1)
  published          Boolean       @default(false)
  // Will display the date only if enough volunteers are joined. So have added a field named "dates_announced"
  is_dates_announced Boolean       @default(false)
  startTime          DateTime?
  endTime            DateTime?

  date_announcement_text String? @db.Text

  author_id String
  author    User   @relation(fields: [author_id], references: [id])

  activityId String
  Activity   Activity @relation(fields: [activityId], references: [id])

  @@index([author_id], name: "author_id")
  @@index([activityId], name: "activityId")
}

model UserRole {
  id      String @id @default(cuid())
  user_id String
  user    User   @relation(fields: [user_id], references: [id])
  role    Role   @default(USER)

  @@index([user_id])
}

enum Role {
  ADMIN
  USER
}

model Volunteers {
  id String @id @default(cuid())

  event_id String
  event    Event  @relation(fields: [event_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user_id  String
  user     User   @relation(fields: [user_id], references: [email], onUpdate: Cascade, onDelete: Cascade)

  assigned_at DateTime @default(now())

  @@index([event_id], name: "event_id")
  @@index([user_id], name: "user_id")
}

// people who organizes the event
model EventLeader {
  id String @id @default(cuid())

  event_id String
  event    Event  @relation(fields: [event_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user_id  String
  user     User   @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  assigned_at DateTime @default(now())

  // TODO: need to add later
  // author_id   String
  // author      User     @relation(fields: [author_id], references: [id], name: "author")

  @@index([event_id], name: "event_id")
  @@index([user_id], name: "user_id")
}

model Tag {
  id          String  @id @default(cuid())
  name        String
  description String?

  ActivityTags ActivityTags[]
}

model ActivityTags {
  id String @id @default(cuid())

  activity    Activity @relation(fields: [activity_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tag         Tag      @relation(fields: [tag_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  activity_id String
  tag_id      String

  @@index([activity_id], name: "activity_id")
  @@index([tag_id], name: "tag_id")
}

model User {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  image      String?
  created_at DateTime @default(now()) @map(name: "created_at")
  updated_at DateTime @updatedAt @map(name: "updated_at")

  activites   Activity[]
  events      Event[]
  volunteers  Volunteers[]
  EventLeader EventLeader[]
  UserRole    UserRole[]

  @@map(name: "users")
}

model Homepage {
  id   String @id @default(cuid())
  body String @db.LongText()

  created_at DateTime @default(now()) @map(name: "created_at")
  updated_at DateTime @updatedAt @map(name: "updated_at")

  status ActivityState
}
