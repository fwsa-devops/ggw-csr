// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Activity {
  id          String    @id @default(cuid())
  name        String
  cover       String?
  description String?   @db.Text
  published   Boolean   @default(false)
  startTime   DateTime?
  endTime     DateTime?
  place       String?

  status ActivityState? @default(DRAFT)

  events Event[]

  authorId String?
  author   User?          @relation(fields: [authorId], references: [id])
  tags     ActivityTags[]
}

enum ActivityState {
  OPEN
  DRAFT
  CLOSED
}

model Event {
  id          String        @id @default(cuid())
  place       String?
  address     String
  leaders     EventLeader[]
  users       EventUser[]
  description String?       @db.Text
  published   Boolean       @default(false)
  startTime   DateTime?
  endTime     DateTime?

  count Int @default(0)

  authorId String?
  author   User?   @relation(fields: [authorId], references: [id])

  activityId String?
  Activity   Activity? @relation(fields: [activityId], references: [id])

  @@index([authorId], name: "authorId")
  @@index([activityId], name: "activityId")
}

model EventUser {
  id String @id @default(cuid())

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [email], onUpdate: Cascade, onDelete: Cascade)

  assignedAt DateTime @default(now())
  assignedBy String?

  @@index([eventId], name: "eventId")
  @@index([userId], name: "userId")
}

model EventLeader {
  id String @id @default(cuid())

  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId  String?
  user    User?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  assignedAt DateTime @default(now())
  assignedBy String?

  @@index([eventId], name: "eventId")
  @@index([userId], name: "userId")
}

model Tag {
  id          String  @id @default(cuid())
  name        String
  description String?

  ActivityTags ActivityTags[]
}

model ActivityTags {
  id String @id @default(cuid())

  activity   Activity? @relation(fields: [activityId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tag        Tag?      @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  activityId String?
  tagId      String?

  @@index([activityId], name: "activityId")
  @@index([tagId], name: "tagId")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  image     String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  activites   Activity[]
  events      Event[]
  EventUser   EventUser[]
  EventLeader EventLeader[]

  @@map(name: "users")
}
