generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String             @unique
  emailVerified    DateTime?
  image            String?
  id               String             @id @default(cuid())
  name             String?
  email            String             @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  accounts         Account[]
  EventHost        EventHost[]
  accounts         Account[]
  EventHost        EventHost[]
  EventParticipant EventParticipant[]
  sessions         Session[]
  sessions         Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Event {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  timezone    String   @default("Asia/Calcutta")

  isPublic            Boolean @default(true)
  isActive            Boolean @default(true)
  image               String
  maxParticipants     Int     @default(0)
  isParticipationOpen Boolean @default(true)

  addressId String
  Address   Address @relation(fields: [addressId], references: [id])

  locationId String
  Location   Location @relation(fields: [locationId], references: [id])

  createdById String
  User        User   @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EventParticipant EventParticipant[]
}

model Location {
  id        String  @id @default(cuid())
  address   String
  latitude  Float
  longitude Float
  Event     Event[]
}

model Address {
  id      String  @id @default(cuid())
  city    String
  state   String
  country String
  zipcode String
  street  String
  name    String?
  Event   Event[]
}

model EventParticipant {
  eventId   String
  userId    String
  checkedIn Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  checkedIn Boolean  @default(false)
  Event     Event    @relation(fields: [eventId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
}

model EventHost {
  eventId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Event     Event    @relation(fields: [eventId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@id([eventId, userId], name: "hostId")
}
